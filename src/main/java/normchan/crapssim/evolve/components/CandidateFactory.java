package normchan.crapssim.evolve.components;

import java.util.Random;

import org.uncommons.watchmaker.framework.factories.AbstractCandidateFactory;

import normchan.crapssim.engine.GameManager;
import normchan.crapssim.evolve.strategy.EvolveStrategy;

public class CandidateFactory extends AbstractCandidateFactory<CrapsPredictorCreature> {

	/**
	 * @param alphabet     The set of characters that can legally occur within a
	 *                     string generated by this factory.
	 * @param stringLength The fixed length of all strings generated by this
	 *                     factory.
	 */
	public CandidateFactory() {

	}

	/**
	 * Generates a random string of a pre-configured length. Each character is
	 * randomly selected from the pre-configured alphabet. The same character may
	 * appear multiple times and some characters may not appear at all.
	 * 
	 * @param rng A source of randomness used to select characters to make up the
	 *            string.
	 * @return A randomly generated string.
	 */
	public CrapsPredictorCreature generateRandomCandidate(Random rng) {
		try {
			GameManager manager = new GameManager(null, EvolveStrategy.class);
			EvolveStrategy strategy = (EvolveStrategy) manager.getPlayer()
					.getStrategy();

			strategy.init(rng);
			
			try {
				manager.setLogGameDetails(false);

			} catch (Exception e) {
				e.printStackTrace();
				System.exit(1);
			}

			return new CrapsPredictorCreature(strategy);
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}

}